// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

enum Profile {
  ADMIN
  MANAGER
  TEAM_MEMBER
}

model User {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @db.VarChar(100)
  email        String    @unique @db.VarChar(50)
  image        String?
  profile      Profile   @default(TEAM_MEMBER)
  roles        Role[]
  teamsManaged Team[]    @relation(name: "TeamManager")
  team         Team?     @relation(name: "TeamMembers", fields: [teamId], references: [id])
  teamId       String?
  absences     Absence[] @relation(name: "UserRelation")

  @@map("user")
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique @db.VarChar(30)
  members   User[]   @relation(name: "TeamMembers")
  manager   User     @relation(name: "TeamManager", fields: [managerId], references: [id])
  managerId String

  @@map("team")
}

model Role {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @db.VarChar(30)
  acronym     String   @unique @db.VarChar(6)
  description String   @db.VarChar(200)
  users       User[]

  @@map("role")
}

model AbsenceType {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique @db.VarChar(30)
  description String    @db.VarChar(200)
  absences    Absence[] @relation(name: "AbsenceRelation")

  @@map("absence_type")
}

model Absence {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  title         String      @db.VarChar(30)
  description   String      @db.VarChar(200)
  startDateAt   DateTime    @db.Date
  endDateAt     DateTime    @db.Date
  startTimeAt   DateTime?   @db.Time()
  endTimeAt     DateTime?   @db.Time()
  isAllDay      Boolean
  user          User        @relation(name: "UserRelation", fields: [userId], references: [id])
  userId        String
  absenceType   AbsenceType @relation(name: "AbsenceRelation", fields: [absenceTypeId], references: [id])
  absenceTypeId String

  @@map("absence")
}
